//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/inputAction/BirdInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @BirdInputAction : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @BirdInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""BirdInputAction"",
    ""maps"": [
        {
            ""name"": ""Bird"",
            ""id"": ""8ad630e4-1e9b-4156-8940-d8ccbed1b9d1"",
            ""actions"": [
                {
                    ""name"": ""Space"",
                    ""type"": ""Button"",
                    ""id"": ""b82b772a-15f5-4c58-a854-60bb41a5b7ba"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseLeft"",
                    ""type"": ""Button"",
                    ""id"": ""78b53655-8880-405d-935f-d973594746bc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f4f8909b-d669-489b-b7fa-2aefbf577299"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""keyBoard & Mouse"",
                    ""action"": ""Space"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dc971e2c-f06e-49e4-9385-8dd21668b3ab"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""keyBoard & Mouse"",
                    ""action"": ""MouseLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""keyBoard & Mouse"",
            ""bindingGroup"": ""keyBoard & Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Bird
        m_Bird = asset.FindActionMap("Bird", throwIfNotFound: true);
        m_Bird_Space = m_Bird.FindAction("Space", throwIfNotFound: true);
        m_Bird_MouseLeft = m_Bird.FindAction("MouseLeft", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Bird
    private readonly InputActionMap m_Bird;
    private IBirdActions m_BirdActionsCallbackInterface;
    private readonly InputAction m_Bird_Space;
    private readonly InputAction m_Bird_MouseLeft;
    public struct BirdActions
    {
        private @BirdInputAction m_Wrapper;
        public BirdActions(@BirdInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Space => m_Wrapper.m_Bird_Space;
        public InputAction @MouseLeft => m_Wrapper.m_Bird_MouseLeft;
        public InputActionMap Get() { return m_Wrapper.m_Bird; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BirdActions set) { return set.Get(); }
        public void SetCallbacks(IBirdActions instance)
        {
            if (m_Wrapper.m_BirdActionsCallbackInterface != null)
            {
                @Space.started -= m_Wrapper.m_BirdActionsCallbackInterface.OnSpace;
                @Space.performed -= m_Wrapper.m_BirdActionsCallbackInterface.OnSpace;
                @Space.canceled -= m_Wrapper.m_BirdActionsCallbackInterface.OnSpace;
                @MouseLeft.started -= m_Wrapper.m_BirdActionsCallbackInterface.OnMouseLeft;
                @MouseLeft.performed -= m_Wrapper.m_BirdActionsCallbackInterface.OnMouseLeft;
                @MouseLeft.canceled -= m_Wrapper.m_BirdActionsCallbackInterface.OnMouseLeft;
            }
            m_Wrapper.m_BirdActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Space.started += instance.OnSpace;
                @Space.performed += instance.OnSpace;
                @Space.canceled += instance.OnSpace;
                @MouseLeft.started += instance.OnMouseLeft;
                @MouseLeft.performed += instance.OnMouseLeft;
                @MouseLeft.canceled += instance.OnMouseLeft;
            }
        }
    }
    public BirdActions @Bird => new BirdActions(this);
    private int m_keyBoardMouseSchemeIndex = -1;
    public InputControlScheme keyBoardMouseScheme
    {
        get
        {
            if (m_keyBoardMouseSchemeIndex == -1) m_keyBoardMouseSchemeIndex = asset.FindControlSchemeIndex("keyBoard & Mouse");
            return asset.controlSchemes[m_keyBoardMouseSchemeIndex];
        }
    }
    public interface IBirdActions
    {
        void OnSpace(InputAction.CallbackContext context);
        void OnMouseLeft(InputAction.CallbackContext context);
    }
}
